version: '3'

services:
  devcontainer:
    # Update this to the latest ns python interface image
    # image: registry.gitlab.com/sanctuaryai/controls/nervous_system/ns-python-interface/ns_python_interface:0.0.1-rc.7
    build:
      context: ..
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 0
      target: base

    container_name: vr_robot_control

    volumes:
      # Update this to wherever you want VS Code to mount the folder of your project, make sure you update workspaceFolder in devcontainer.json as well
      - ../..:/workspaces:cached
      - /tmp/.X11-unix:/tmp/.X11-unix
      - $HOME/.Xauthority:/root/.Xauthority:rw
      - ../connextdds_qos_profiles:/tmp/connextdds_qos_profiles

    entrypoint: [ "/bin/bash", "/workspaces/vr_robot_control/.devcontainer/entrypoint.sh" ]
    tty: true
    stdin_open: true

    ulimits:
      rtprio: 99
      rttime: -1 # corresponds to 'unlimited'
      memlock: 8428281856
    security_opt:
      - seccomp:unconfined

    network_mode: "host"
    ipc: "host"
    shm_size: 1G

    environment:
      - DISPLAY
      - WORKSPACEDIR=/workspaces/gpr_move
      # for now, mount the qos files. later, install them as part of the application
      - NDDS_QOS_PROFILES="file:///tmp/connextdds_qos_profiles/profiles/base/sanctuary_base_profile.xml; file:///tmp/connextdds_qos_profiles/profiles/network/unicast_qos.xml; file:///tmp/connextdds_qos_profiles/profiles/applications/ns_python_base.xml; file:///tmp/connextdds_qos_profiles/profiles/applications/empress.xml"
    secrets:
      - source: sai_identity_key
        target: sai_identity_key.pem
      - source: sai_identity_cert
        target: sai_identity_cert.pem
      - source: sai_identity_ca_cert
        target: sai_identity_ca_cert.pem
      - source: sai_permissions_ca_cert
        target: sai_permissions_ca_cert.pem
      - source: governance
        target: governance.xml.p7s
      - source: permissions
        target: permissions.xml.p7s
      - source: sai_identity_ca_crl
        target: sai_identity_ca_crl.crl

# USE THIS FOR DEV PURPOSES, 
# keep a local secrets folder under the root directory
secrets:
  sai_identity_cert:
    file: ~/development/dev-dds-security-artifacts/unrestricted-l3-secrets/sai_identity_cert.pem
  sai_identity_key:
    file: ~/development/dev-dds-security-artifacts/unrestricted-l3-secrets/sai_identity_key.pem
  sai_identity_ca_cert:
    file: ~/development/dev-dds-security-artifacts/unrestricted-l3-secrets/sai_identity_ca_cert.pem
  sai_identity_ca_crl:
    file: ~/development/dev-dds-security-artifacts/unrestricted-l3-secrets/sai_identity_ca_crl.crl
  sai_permissions_ca_cert:
    file: ~/development/dev-dds-security-artifacts/unrestricted-l3-secrets/sai_permissions_ca_cert.pem
  governance:
    file: ~/development/dev-dds-security-artifacts/unrestricted-l3-secrets/governance.xml.p7s
  permissions:
    file: ~/development/dev-dds-security-artifacts/unrestricted-l3-secrets/permissions.xml.p7s

# USE THIS WHEN THERE IS A PACKAGED APPLICATION WITH A PROPER DOCKER-COMPOSE
# secrets:
#   sai_identity_cert:
#     file: /etc/ssl/certs/sai_identity_cert.pem
#   sai_identity_key:
#     file: /etc/ssl/private/sai_identity_key.pem
#   sai_identity_ca_cert:
#     file: /etc/ssl/certs/sai_identity_ca_cert.pem
#   sai_identity_ca_crl:
#     file: /etc/ssl/crl/sai_identity_ca_crl.crl
#   sai_permissions_ca_cert:
#     file: /etc/ssl/certs/sai_permissions_ca_cert.pem
#   governance:
#     file: ~/.carbon/sec_artifacts/governance.xml.p7s
#   permissions:
#     file: ~/.carbon/sec_artifacts/permissions/unrestricted_permissions.xml.p7s
